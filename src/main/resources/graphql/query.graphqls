# Root Query type
type Query {
    """퀴즈 잔디밭 정보"""
    getQuizGarden(
        startDate: String!,
        endDate: String!
    ): [QuizGarden]!

    """유저의 컬렉션 목록"""
    myCollections(
        paging: DataPage,
        sort: SortOrder = LATEST
    ): CollectionWithAttemptsPaging

    """히스토리 : filter 조건 없으면 PUBLIC, PRIVATE 둘 다"""
    myHistory(
        paging: DataPage,
        filter : Access,
    ): CollectionWithAttemptsPaging

    """컬렉션에 속한 퀴즈들과 유저의 퀴즈 시도 정보"""
    getQuizzesWithAttemptByCollectionId(
        collectionId: ID!
    ): [QuizWithAttempt!]!

    """컬렉션 조회"""
    getCollection(
        collectionId: ID!
    ): Collection

    """모든 카테고리 목록(로그인 필요 없음)"""
    getAllCategories: [Category!]!

    """로그인한 유저의 정보"""
    me: User

    """컬렉션 검색"""
    searchCollections(
        paging: DataPage,
        sort: SortOrder = LATEST,
        categoryIds: [Int],
        keywords: [String],
        maxCorrectRate: Int
    ) : CollectionWithAttemptsPaging
}

"""정렬 조건"""
enum SortOrder {
    "최신 순"
    LATEST
    "정답률 낮은 순"
    LOWEST_ACCURACY
}

input DataPage {
    pageSize : Int = 10
    offset : Int = 0
}

type PageInfo {
    hasNextPage : Boolean!
    currentPage : Int!
    totalPages : Int!
}

interface TotalAttempt {
    totalAttempts: Int
    totalCorrectAttempts: Int
}

interface RecentAttempt {
    recentAttempts: Int
    recentCorrectAttempts: Int
}

type CollectionWithAttemptsPaging {
    collectionsWithAttempt: [CollectionWithAttempt!]!
    pageInfo: PageInfo!
}

type CollectionWithAttempt implements TotalAttempt & RecentAttempt {
    collection: Collection
    quizCount: Int
    totalAttempts: Int
    totalCorrectAttempts: Int
    recentAttempts: Int
    recentCorrectAttempts: Int
}

type QuizWithAttempt implements TotalAttempt{
    quiz: Quiz
    totalAttempts: Int
    totalCorrectAttempts: Int
    recentAnswerAt: String
}

type QuizGarden {
    date: String
    quizzesSolved: Int
    dayIndex: Int
    weekIndex: Int
}

type CollectionPage {
    collections: [Collection!]!
    pageInfo: PageInfo!
    totalCount : Int!
}