# Root Query type
type Query {
    """first = 데이터 개수, start = 첫 번째 레코드가 시작되는 인덱스"""
    myPage(first: Int!, start: Int!, startDate: String!, endDate: String!): MyPage
    userAttemptedCollections(start: Int!, first: Int!): CollectionPage

    getCollectionWithQuizzes(collectionId: ID!): CollectionWithQuizzes
    deleteCollection(collectionId: ID!): String

    deleteQuiz(quizId: ID!): String

    getAllCategories: [Category!]!
}

type CollectionWithQuizzes {
    collection: Collection
    quizzesWithAttempts: [QuizzesWithAttempts]
}

type QuizzesWithAttempts {
    quiz: Quiz
    totalAttempts: Int
    correctAttempts: Int
    recentAnswerAt: String
}

type MyPage {
    user: User
    collectionPage: CollectionPage
    quizGardens: [QuizGarden]
}

type QuizGarden {
    date: String
    quizzesSolved: Int
    dayIndex: Int
    weekIndex: Int
}

type CollectionPage {
    collections: [Collection]
    totalCount: Int
    hasNext: Boolean
}

# Collection type
type Collection {
    id: ID
    name: String
    description: String
    imgUrl: String
    access: Access
    category: Category
    creator: User
    isDeleted: Boolean
    createdAt: String
    updatedAt: String
    quizzes: [Quiz]
}

# Member type
type User {
    id: ID
    email: String
    nickname: String
    oAuthProvider: OAuthProvider
    isDeleted: Boolean
    createdAt: String
    updatedAt: String
}

# Quiz type
type Quiz {
    id: ID
    question: String
    answer: String
    collection: Collection
    creator: User
    access: Access
    isDeleted: Boolean
    createdAt: String
    updatedAt: String
}

type Category {
    id: ID
    name: String
}

type UserCollectionAttempt {
    id: ID
    collection: Collection
    user: User
    startedAt: String
    completedAt: String
    totalQuizCount: Int
    correctQuizCount: Int
}

# Enums
enum Access {
    PUBLIC
    PRIVATE
}

enum OAuthProvider {
    KAKAO
    NAVER
}

type Mutation {
    createQuiz(createQuizInput: CreateQuizInput!): String!
    editQuiz(quizId: ID!, editQuizInput: EditQuizInput!): String!
}

input CreateCollectionInput {
    name: String
    description: String
    access: Access
    categoryId: ID
}

input CreateQuizInput {
    question: String!
    answer: String!
    collectionId: Int!
}

input EditQuizInput {
    question: String
    answer: String
    collectionId: Int
}