# Root Query type
type Query {
    collections: [Collection]
    collectionById(id: ID!): Collection
    getMyCollections: [CollectionWithCategoryAndQuizCountAndResults]
    getCollectionsByCategoryId(categoryId: ID!): [CollectionWithCategoryAndQuizCountAndResults]

    members: [Member]
    memberById(id: ID!): Member

    quizzes: [Quiz]
    quizById(quizId: ID!): Quiz
    getMyQuiz: [QuizWithCollectionAndResults]
    getQuizzesByCollectionId(collectionId: ID!): [QuizWithCollectionAndResults]

    quizResults: [QuizResult]
    quizResultById(id: ID!): QuizResult
}

# Collection type
type Collection {
    id: ID!
    name: String!
    access: Access!
    creator: Member!
    category: Category!
    isDeleted: Boolean!
    createdAt: String!
    updatedAt: String!
}

# Member type
type Member {
    id: ID!
    email: String
    nickname: String
    oAuthProvider: OAuthProvider
    isDeleted: Boolean!
    createdAt: String!
    updatedAt: String!
}

# Quiz type
type Quiz {
    id: ID!
    question: String!
    answer: String!
    collectionId: ID!
    creatorId: ID!
    access: Access!
    quizResults: [QuizResult]
    isDeleted: Boolean!
    createdAt: String!
    updatedAt: String!
}

# QuizResult type
type QuizResult {
    id: ID!
    quiz: Quiz!
    userId: ID!
    correctAttempts: Int!
    wrongAttempts: Int!
    isDeleted: Boolean!
    createdAt: String!
    updatedAt: String!
}

type Category {
    id: ID!
    name: String!
}

# Enums
enum Access {
    PUBLIC
    PRIVATE
}

enum OAuthProvider {
    KAKAO
    NAVER
}

type QuizWithCollectionAndResults {
    quiz: Quiz!
    collection: Collection!
    quizResult: QuizResult  # 해당 퀴즈에 대한 결과가 없을 수 있음 -> Nullable 처리
}

type CollectionWithCategoryAndQuizCountAndResults {
    quizCount: Int!
    correctAttempts: Int!
    wrongAttempts: Int!
    Collection: Collection!
    Category: Category!
}

# Mutation (Read 제외 CUD 담당)
type Mutation {
    # Quiz
    createQuiz(createQuizInput: CreateQuizInput!): String!
    editQuiz(id: ID!, editQuizInput: EditQuizInput!): String!
    deleteQuiz(id: ID!): String!

    # Collection
    createCollection(collectionInput: CollectionInput!): String!
}

# Quiz
input CreateQuizInput {
    question: String!
    answer: String!
    collectionId: ID!
    creatorId: ID!
    access: Access!
}

input EditQuizInput {
    question: String
    answer: String
    collectionId: ID
    access: Access
}

# Collection
input CollectionInput {
    name: String
    categoryId: Int
    access: Access
}


