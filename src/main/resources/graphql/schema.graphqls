# Root Query type
type Query {
    collections: [Collection]
    collectionById(id: ID!): Collection
    members: [Member]
    memberById(id: ID!): Member
    quizzes: [Quiz]
    quizById(id: ID!): Quiz
    quizResults: [QuizResult]
    quizResultById(id: ID!): QuizResult
}

# Collection type
type Collection {
    id: ID!
    name: String!
    access: Access!
    creatorId: ID!
    quizzes: [Quiz]
    isDeleted: Boolean!
    createdAt: String!
    updatedAt: String!
}

# Member type
type Member {
    id: ID!
    email: String
    nickname: String
    oAuthProvider: OAuthProvider
    collections: [Collection]
    createdQuizzes: [Quiz]
    quizResults: [QuizResult]
    isDeleted: Boolean!
    createdAt: String!
    updatedAt: String!
}

# Quiz type
type Quiz {
    id: ID!
    question: String!
    answer: String!
    collectionId: ID!
    creatorId: ID!
    access: Access!
    quizResults: [QuizResult]
    isDeleted: Boolean!
    createdAt: String!
    updatedAt: String!
}

# QuizResult type
type QuizResult {
    id: ID!
    quiz: Quiz!
    userId: ID!
    correctAttempts: Int!
    wrongAttempts: Int!
    isDeleted: Boolean!
    createdAt: String!
    updatedAt: String!
}

# Enums
enum Access {
    PUBLIC
    PRIVATE
}

enum OAuthProvider {
    KAKAO
    NAVER
}

# Mutation (Read 제외 CUD 담당)
type Mutation {
    createQuiz(quizInput: QuizInput!): String!
}

input QuizInput {
    question: String!
    answer: String!
    collectionId: ID!
    creatorId: ID!
    access: Access!
}
