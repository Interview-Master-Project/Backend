# Root Query type
type Query {
    myPage(userId: ID!, offset: Int!, limit: Int!): MyPage
}

type MyPage {
    user: User!
    collectionPage: CollectionPage!
}

type CollectionPage {
    collections: [Collection!]
    totalCount: Int!
    hasNext: Boolean!
}

# Collection type
type Collection {
    id: ID!
    name: String!
    description: String!
    imgUrl: String!
    access: Access!
    category: Category!
    creator: User!
    isDeleted: Boolean!
    createdAt: String!
    updatedAt: String!
}

# Member type
type User {
    id: ID!
    email: String!
    nickname: String!
    oAuthProvider: OAuthProvider!
    isDeleted: Boolean!
    createdAt: String!
    updatedAt: String!
}

# Quiz type
type Quiz {
    id: ID!
    question: String!
    answer: String!
    collection: Collection!
    creator: User!
    access: Access!
    isDeleted: Boolean!
    createdAt: String!
    updatedAt: String!
}

type Category {
    id: ID!
    name: String!
}

type UserCollectionAttempt {
    id: ID!
    collection: Collection!
    user: User!
    startedAt: String!
    completedAt: String!
    totalQuizCount: Int!
    correctQuizCount: Int!
}

# Enums
enum Access {
    PUBLIC
    PRIVATE
}

enum OAuthProvider {
    KAKAO
    NAVER
}

# Mutation (Read 제외 CUD 담당)
type Mutation {
    createQuiz(createQuizInput: CreateQuizInput!): String!
    editQuiz(id: ID!, editQuizInput: EditQuizInput!): String!
    deleteQuiz(id: ID!): String!
}

input CreateQuizInput {
    question: String!
    answer: String!
    collectionId: ID!
    creatorId: ID!
    access: Access!
}

input EditQuizInput {
    question: String
    answer: String
    collectionId: ID
    access: Access
}

