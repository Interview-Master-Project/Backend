# Root Query type
type Query {
    """first = 데이터 개수(default=10), start = 첫 번째 레코드가 시작되는 인덱스"""
    getQuizGarden(
        startDate: String!,
        endDate: String!
    ): [QuizGarden]!

    userCollection(paging: DataPage): CollectionPage
    userCollectionHistory(paging: DataPage): CollectionPage

    getCollectionWithQuizzes(collectionId: ID!): CollectionWithQuizzes
    deleteCollection(collectionId: ID!): String

    getAllCategories: [Category!]!

    me: User

}

input DataPage {
    first : Int = 10
    start : Int = 0
}

type PageInfo {
    hasNextPage : Boolean!
    currentPage : Int!
    totalPages : Int!
}

type CollectionWithQuizzes {
    collection: Collection
    quizzesWithAttempts: [QuizzesWithAttempts]
}

type QuizzesWithAttempts {
    quiz: Quiz
    totalAttempts: Int
    correctAttempts: Int
    recentAnswerAt: String
}

type QuizGarden {
    date: String
    quizzesSolved: Int
    dayIndex: Int
    weekIndex: Int
}

type CollectionPage {
    collections: [Collection!]!
    pageInfo: PageInfo!
    totalCount : Int!
}

# Collection type
type Collection {
    id: ID
    name: String
    description: String
    imgUrl: String
    access: Access
    category: Category
    creator: User
    isDeleted: Boolean
    createdAt: String
    updatedAt: String
    quizzes: [Quiz]
}

# Member type
type User {
    id: ID
    email: String
    nickname: String
    oAuthProvider: OAuthProvider
    isDeleted: Boolean
    createdAt: String
    updatedAt: String
}

# Quiz type
type Quiz {
    id: ID
    question: String
    answer: String
    collection: Collection
    creator: User
    access: Access
    isDeleted: Boolean
    createdAt: String
    updatedAt: String
}

type Category {
    id: ID
    name: String
}

type UserCollectionAttempt {
    id: ID
    collection: Collection
    user: User
    startedAt: String
    completedAt: String
    totalQuizCount: Int
    correctQuizCount: Int
}

# Enums
enum Access {
    PUBLIC
    PRIVATE
}

enum OAuthProvider {
    KAKAO
    NAVER
}

