scalar DateTime

# Root Query type
type Query {
    myPage(offset: Int!, limit: Int!, startDate: String!, endDate: String!): MyPage
    userAttemptedCollections(offset: Int!, limit: Int!): CollectionPage

    getCollectionWithQuizzes(collectionId: ID!): CollectionWithQuizzes
    deleteCollection(collectionId: ID!): String
    searchCollections(categoryIds: [ID!], keywords: [String!], maxCorrectRate: Int): CollectionSearchResult


    deleteQuiz(quizId: ID!): String

    getAllCategories: [Category!]!
}

type CollectionSearchResult {
    collection: Collection
    category: Category
    quizCount: Int
    correctRate: Int
}

type CollectionWithQuizzes {
    collection: Collection
    quizzesWithAttempts: [QuizzesWithAttempts]
}

type QuizzesWithAttempts {
    quiz: Quiz
    totalAttempts: Int
    correctAttempts: Int
    recentAnswerAt: DateTime
}

type MyPage {
    user: User
    collectionPage: CollectionPage
    quizGardens: [QuizGarden]
}

type QuizGarden {
    date: DateTime
    quizzesSolved: Int
    dayIndex: Int
    weekIndex: Int
}

type CollectionPage {
    collections: [Collection]
    totalCount: Int
    hasNext: Boolean
}

# Collection type
type Collection {
    id: ID!
    name: String!
    description: String
    imgUrl: String!
    access: Access!
    category: Category!
    creator: User!
    isDeleted: Boolean!
    createdAt: DateTime!
    updatedAt: DateTime!
    quizzes: [Quiz!]!
}

# Member type
type User {
    id: ID!
    email: String!
    nickname: String!
    oAuthProvider: OAuthProvider!
    isDeleted: Boolean!
    createdAt: DateTime!
    updatedAt: DateTime!
    collections: [Collection!]!
    quizzes: [Quiz!]!
}

# Quiz type
type Quiz {
    id: ID!
    question: String!
    answer: String!
    collection: Collection!
    creator: User!
    access: Access!
    isDeleted: Boolean!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type Category {
    id: ID!
    name: String!
}

type UserCollectionAttempt {
    id: ID!
    collection: Collection!
    user: User!
    startedAt: DateTime!
    completedAt: DateTime   """ 시도하고 아직 마무리를 안한 경우 null일 수 있음 """
    totalQuizCount: Int
    correctQuizCount: Int
}

# Enums
enum Access {
    PUBLIC
    PRIVATE
}

enum OAuthProvider {
    KAKAO
    NAVER
}

type Mutation {
    createQuiz(createQuizInput: CreateQuizInput!): String!
    editQuiz(quizId: ID!, editQuizInput: EditQuizInput!): String!
}

input CreateCollectionInput {
    name: String
    description: String
    access: Access
    categoryId: ID
}

input CreateQuizInput {
    question: String!
    answer: String!
    collectionId: Int!
}

input EditQuizInput {
    question: String
    answer: String
    collectionId: Int
}